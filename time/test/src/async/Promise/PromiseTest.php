<?php

namespace zaboy\test\async\Promise;

use zaboy\async\Promise\Promise;
use zaboy\async\Promise\PromiseInterface;
use zaboy\async\Promise\Promise\Pending as PendingPromise;
use zaboy\async\Promise\TimeIsOutException;
use zaboy\async\Promise\RejectedException;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-24 at 00:05:36.
 */
class PromiseTest extends \PHPUnit_Framework_TestCase
{

    //=========== new Promise; resolve(); reject(); ============================
    public function testGetStatePendingPromise()
    {
        $promise = new Promise;
        $this->assertEquals(PromiseInterface::PENDING, $promise->getState());
    }

    public function testPendingPromiseWait()
    {
        $promise = new Promise;
        $this->assertContainsOnlyInstancesOf(TimeIsOutException::class, [$promise->wait(false)]);
        $this->setExpectedException(TimeIsOutException::class);
        $promise->wait();
    }

    public function testCanResolveWithSameValue()
    {
        $promise = new Promise;
        $promise->resolve('foo');
        $promise->resolve('foo');
        $this->assertEquals('foo', $promise->wait(false));
        $this->assertEquals('foo', $promise->wait());
    }

    public function testCannotResolveNonPendingPromise()
    {
        $this->setExpectedExceptionRegExp(\RuntimeException::class, '|.*The promise is already fulfilled.*|');
        $promise = new Promise;
        $promise->resolve('foo');
        $promise->resolve('bar');
    }

    public function testRejectPendingPromiseByString()
    {
        $promise = new Promise;
        $promise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $promise->getState());
        $this->setExpectedException(RejectedException::class, 'foo');
        $promise->wait(true);
    }

    public function testRejectPendingPromiseByException()
    {
        $promise = new Promise;
        $promise->reject(new \LogicException('foo'));
        $this->assertEquals('foo', $promise->wait(false)->getMessage());
        $this->setExpectedException(\LogicException::class, 'foo');
        $promise->wait(true);
    }

    public function testCanRejectWithSameValue()
    {
        $promise = new Promise;
        $promise->reject('foo');
        $promise->reject('foo');
        $this->assertEquals('foo', $promise->wait(false)->getMessage());
    }

    public function testCannotRejectNonPendingPromise()
    {
        $this->setExpectedExceptionRegExp(\RuntimeException::class, '|.*Cannot reject a fulfilled promise.*|');
        $promise = new Promise;
        $promise->resolve('foo');
        $promise->reject('bar');
    }

    //================= Dependent Promise ======================================

    public function testResolveByFulfilledPromise()
    {
        $slavePromise = new Promise;
        $masterPromise = new Promise;
        $masterPromise->resolve('foo');
        $slavePromise->resolve($masterPromise);
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise->getState());
        $this->assertEquals('foo', $slavePromise->wait(false));
    }

    public function testResolveByRejectedPromise()
    {
        $slavePromise = new Promise;
        $masterPromise = new Promise;
        $masterPromise->reject('foo');
        $slavePromise->resolve($masterPromise);
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
        $this->assertEquals('foo', $slavePromise->wait(false)->getMessage());
    }

    public function testResolveByPendingPromise()
    {
        $slavePromise = new Promise;
        $masterPromise = new Promise;
        $slavePromise->resolve($masterPromise);
        $this->assertEquals(PromiseInterface::PENDING, $slavePromise->getState());
    }

    public function testRejectByFulfilledPromise()
    {
        $slavePromise = new Promise;
        $masterPromise = new Promise;
        $masterPromise->resolve('foo');
        $slavePromise->reject($masterPromise);
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
        $this->assertEquals('foo', $slavePromise->wait(false)->getMessage());
    }

    public function testRejectByPendingPromise()
    {
        $slavePromise = new Promise;
        $masterPromise = new Promise;
        $slavePromise->reject($masterPromise);
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
        $this->assertContains('Reason is pending promise', $slavePromise->wait(false)->getMessage());
    }

    public function testRejectByRejectedPromise()
    {
        $slavePromise = new Promise;
        $masterPromise = new Promise;
        $masterPromise->reject('foo');
        $slavePromise->reject($masterPromise);
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
        $this->assertContains('foo', $slavePromise->wait(false)->getMessage());
    }

    public function testResolveByPendingPromiseAndFulfillIt()
    {
        $slavePromise = new Promise;
        $masterPromise = new Promise;
        $slavePromise->resolve($masterPromise);
        $masterPromise->resolve('foo');
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise->getState());
    }

    public function testResolveByPendingPromiseAndRejectIt()
    {
        $slavePromise = new Promise;
        $masterPromise = new Promise;
        $slavePromise->resolve($masterPromise);
        $masterPromise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
    }

    //=================== Promise->then() ======================================

    public function testThenAndFulfill()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $masterPromise->resolve('foo');
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise->getState());
    }

    public function testThenAndAndReject()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $masterPromise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
    }

    public function testThenOnFulfilledAndFulfill()
    {
        $masterPromise = new Promise;
        $onFulfilled = function($value) {
            return 'After $onFulfilled - ' . $value;
        };
        $slavePromise = $masterPromise->then($onFulfilled);
        $masterPromise->resolve('foo');
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise->getState());
        $this->assertEquals('After $onFulfilled - foo', $slavePromise->wait(false));
    }

    public function testThenOnRejectedSuccessAndReject()
    {
        $masterPromise = new Promise;
        $onFulfilled = function($value) {
            return 'After $onFulfilled - ' . $value;
        };
        $onRejected = function($value) {
            return 'After $onRejected - ' . $value->getMessage();
        };
        $slavePromise = $masterPromise->then($onFulfilled, $onRejected);
        $masterPromise->reject('foo');
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise->getState());
        $this->assertEquals('After $onRejected - foo', $slavePromise->wait(false));
    }

    public function testThenOnRejectedErrorAndReject()
    {
        $masterPromise = new Promise;
        $onFulfilled = function($value) {
            return 'After $onFulfilled - ' . $value;
        };
        $onRejected = function($value) {
            throw new \Exception('After $onRejected - ' . $value->getMessage());
        };
        $slavePromise = $masterPromise->then($onFulfilled, $onRejected);
        $masterPromise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise->getState());
        $this->assertEquals('After $onRejected - foo', $slavePromise->wait(false)->getMessage());
    }

    //=================== Promise->then()->then()->then() ======================

    public function testThenAfterThenAndFulfill()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $slaveOfSlavePromise = $slavePromise->then();
        $masterPromise->resolve('foo');
        $this->assertEquals(PromiseInterface::FULFILLED, $slaveOfSlavePromise->getState());
    }

    public function testThenAfterThenAndReject()
    {
        $masterPromise = new Promise;
        $slavePromise = $masterPromise->then();
        $slaveOfSlavePromise = $slavePromise->then();
        $masterPromise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $slaveOfSlavePromise->getState());
    }

    public function testThenThenAndFulfill()
    {
        $masterPromise = new Promise;
        $slavePromise1 = $masterPromise->then();
        $slavePromise2 = $masterPromise->then();
        $masterPromise->resolve('foo');
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise1->getState());
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise2->getState());
    }

    public function testThenThenAndReject()
    {
        $masterPromise = new Promise;
        $slavePromise1 = $masterPromise->then();
        $slavePromise2 = $masterPromise->then();
        $masterPromise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise1->getState());
        $this->assertEquals(PromiseInterface::REJECTED, $slavePromise2->getState());
    }

    //=========================== Promise->wait() ==============================
}
