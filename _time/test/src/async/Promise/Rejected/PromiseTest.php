<?php

namespace zaboy\test\async\Promise\Rejected;

use zaboy\async\Promise\Promise;
use zaboy\async\Promise\PromiseInterface;
use zaboy\async\Promise\Promise\Pending as PendingPromise;
use zaboy\async\Promise\TimeIsOutException;
use zaboy\async\Promise\RejectedException;
use zaboy\Di\InsideConstruct;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-24 at 00:05:36.
 */
class PromiseTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Promise
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $container = include 'config/container.php';
        InsideConstruct::setContainer($container);
    }

    //====================== getState(); =======================================

    public function test_getState()
    {
        $promise = new Promise;
        $promise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $promise->getState());
    }

    //====================== wait(); ===========================================
    public function test_wait_false()
    {
        $promise = new Promise;
        $promise->reject('foo');
        $this->assertContainsOnlyInstancesOf(RejectedException::class, [$promise->wait(false)]);
        $this->assertEquals('foo', $promise->wait(false)->getMessage());
    }

    public function test_wait_true()
    {
        $promise = new Promise;
        $promise->reject('foo');
        $this->setExpectedException(RejectedException::class, 'foo');
        $promise->wait(true);
    }

    //====================== resolve(); ========================================
    //
    //
    //====================== reject(); =========================================
    //====================== then(); ===========================================
}
