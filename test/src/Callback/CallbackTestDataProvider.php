<?php

namespace zaboy\test\Callback;

require_once './src/Callback/Example/CallMe.php';

use zaboy\Callback\Callback;
use zaboy\Callback\Example\CallMe;
use zaboy\Callback\Interruptor\Http;
use zaboy\Callback\Interruptor\Process;
use zaboy\Callback\Promiser;
use zaboy\res\Di\InsideConstruct;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-20 at 12:54:48.
 */
class CallbackTestDataProvider extends \PHPUnit_Framework_TestCase
{

    public function provider_mainType()
    {
        $stdObject = (object)['prop' => 'Hello '];

        //function
        return array(
            [
                'class_parents',
                self::class,
                [
                    'PHPUnit_Framework_TestCase' => "PHPUnit_Framework_TestCase",
                    'PHPUnit_Framework_Assert' => "PHPUnit_Framework_Assert"
                ]
            ],
            //closure
            [
                function ($val) {
                    return 'Hello ' . $val;
                },
                'World',
                'Hello World'
            ],
            //closure with uses
            [
                function ($val) use ($stdObject) {
                    return $stdObject->prop . $val;
                },
                'World',
                'Hello World'
            ],
            //invokable object
            [
                new CallMe(),
                'World',
                'Hello World'
            ],
            //method
            [
                [new CallMe(), 'method'],
                'World',
                'Hello World'
            ],
            //static method
            [
                [new CallMe(), 'staticMethod'],
                'World',
                'Hello World'
            ],
            [
                [CallMe::class, 'staticMethod'],
                'World',
                'Hello World'
            ],
            [
                '\\' . CallMe::class . '::staticMethod',
                'World',
                'Hello World'
            ],
        );
    }

    public function provider_multiplexerType()
    {
        $stdObject = (object)['prop' => 'Hello '];
        //function
        return array(
            [
                [
                    new Process(function ($val) {
                        return 'Hello ' . $val;
                    }),
                    new Process(function ($val) use ($stdObject) {
                        return $stdObject->prop . $val;
                    }),
                    new Process(new CallMe()),
                    new Process([new CallMe(), 'method']),
                    new Process([new CallMe(), 'staticMethod']),
                    new Process([CallMe::class, 'staticMethod']),
                    new Process('\\' . CallMe::class . '::staticMethod')
                ],
                "World"
            ],
            [
                [
                    new Process(function ($val) {
                        return 'Hello ' . $val;
                    }),
                    new Process(function ($val) use ($stdObject) {
                        throw new \Exception("some error");
                    }),
                    new Process(new CallMe()),
                    new Process([new CallMe(), 'method']),
                    new Process('\\' . CallMe::class . '::staticMethod')
                ],
                "World"
            ],
        );
    }
}
