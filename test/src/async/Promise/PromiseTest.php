<?php

namespace zaboy\test\async\Promise;

use zaboy\async\Promise\Promise;
use zaboy\async\Promise\PromiseInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-24 at 00:05:36.
 */
class PromiseTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Promise
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers zaboy\async\Entity\Promise::getState
     * @todo   Implement testGetState().
     */
    public function testGetStatePendingPromise()
    {
        $promise = new Promise;
        $this->assertEquals(PromiseInterface::PENDING, $promise->getState());
    }

    public function testResolvePendingPromise()
    {
        $promise = new Promise;
        $promise->resolve('foo');
        $this->assertEquals(PromiseInterface::FULFILLED, $promise->getState());
    }

    public function testCanResolveWithSameValue()
    {
        $promise = new Promise;
        $promise->resolve('foo');
        $promise->resolve('foo');
        $this->assertEquals('foo', $promise->wait(false));
    }

    public function testCannotResolveNonPendingPromise()
    {
        $this->setExpectedExceptionRegExp(\RuntimeException::class, '|.*The promise is already fulfilled.*|');
        $promise = new Promise;
        $promise->resolve('foo');
        $promise->resolve('bar');
    }

    public function testRejectPendingPromiseByString()
    {
        $promise = new Promise;
        $promise->reject('foo');
        $this->assertEquals(PromiseInterface::REJECTED, $promise->getState());
    }

    public function testRejectPendingPromiseByException()
    {
        $promise = new Promise;
        $promise->reject(new \LogicException('foo'));
        $this->assertEquals('foo', $promise->wait(false)->getMessage());
    }

    public function testCanRejectWithSameValue()
    {
        $promise = new Promise;
        $promise->reject('foo');
        $promise->reject('foo');
        $this->assertEquals('foo', $promise->wait(false)->getMessage());
    }

    public function testCannotRejectNonPendingPromise()
    {
        $this->setExpectedExceptionRegExp(\RuntimeException::class, '|.*Cannot reject a fulfilled promise.*|');
        $promise = new Promise;
        $promise->resolve('foo');
        $promise->reject('bar');
    }

    public function testCanResolveByPromise()
    {
        $slavePromise = new Promise;
        $masterPromise = new Promise;
        $slavePromise->resolve($masterPromise);
        $this->assertEquals(PromiseInterface::PENDING, $slavePromise->getState());
    }

    public function testResolveByPendingPromiseAndFulfillIt()
    {
        $slavePromise = new Promise;
        $masterPromise = new Promise;
        $slavePromise->resolve($masterPromise);
        $masterPromise->resolve('foo');
        $this->assertEquals(PromiseInterface::FULFILLED, $slavePromise->getState());
    }

}
